package it.elasticsearch;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONWriter;
import org.mapfish.geo.MfFeature;
import org.mapfish.geo.MfGeo;
import org.mapfish.geo.MfGeoFactory;
import org.mapfish.geo.MfGeoJSONReaderForGoogle;
import org.mapfish.geo.MfGeometry;
import org.mapfish.geo.MfGeometryCollection;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryCollection;

public class Main {

	public static final String POINT_PRE = "{ \"type\": \"Feature\", \"geometry\": {\"type\": \"Point\", \"coordinates\": [";
	public static final String POINT_POST = "] }, \"properties\": { } }";

	public static final String NY_KML = "{\"type\": \"GeometryCollection\", \"geometries\": [{\"type\": \"Polygon\", \"coordinates\": [[[0.0, 40.69116, -74.04626], [0.0, 40.69118, -74.04607], [0.0, 40.6911, -74.04586], [0.0, 40.6909, -74.0453], [0.0, 40.69073, -74.04485], [0.0, 40.69058, -74.04453], [0.0, 40.69046, -74.04428], [0.0, 40.69031, -74.04405], [0.0, 40.69023, -74.04393], [0.0, 40.69021, -74.04392], [0.0, 40.69008, -74.04377], [0.0, 40.68994, -74.04366], [0.0, 40.68972, -74.04356], [0.0, 40.68959, -74.04352], [0.0, 40.68927, -74.04351], [0.0, 40.68915, -74.04356], [0.0, 40.68898, -74.04359], [0.0, 40.68886, -74.04366], [0.0, 40.68876, -74.0438], [0.0, 40.68866, -74.04398], [0.0, 40.68861, -74.04421], [0.0, 40.68854, -74.0444], [0.0, 40.68858, -74.04457], [0.0, 40.68866, -74.04479], [0.0, 40.68874, -74.04507], [0.0, 40.68888, -74.04537], [0.0, 40.68902, -74.04562], [0.0, 40.68914, -74.04588], [0.0, 40.68927, -74.04614], [0.0, 40.68949, -74.04647], [0.0, 40.68964, -74.04657], [0.0, 40.68986, -74.04675], [0.0, 40.69017, -74.04699], [0.0, 40.6905, -74.04728], [0.0, 40.69054, -74.04713], [0.0, 40.69056, -74.0471], [0.0, 40.69065, -74.04712], [0.0, 40.69068, -74.04718], [0.0, 40.69072, -74.04721], [0.0, 40.69085, -74.04723], [0.0, 40.691, -74.04725], [0.0, 40.69111, -74.04717], [0.0, 40.69114, -74.0471], [0.0, 40.69113, -74.04689], [0.0, 40.69115, -74.04657]]]}, {\"type\": \"Polygon\", \"coordinates\": [[[0.0, 40.70047, -74.0394], [0.0, 40.69925, -74.03833], [0.0, 40.69922, -74.0382], [0.0, 40.69915, -74.03814], [0.0, 40.69909, -74.03818], [0.0, 40.69903, -74.03829], [0.0, 40.69897, -74.03844], [0.0, 40.69892, -74.03858], [0.0, 40.69888, -74.03881], [0.0, 40.69887, -74.03898], [0.0, 40.69887, -74.0392], [0.0, 40.69891, -74.03932], [0.0, 40.69898, -74.03939], [0.0, 40.69908, -74.03943], [0.0, 40.69915, -74.03949], [0.0, 40.69918, -74.03956], [0.0, 40.69913, -74.03963], [0.0, 40.69908, -74.03966], [0.0, 40.69903, -74.03973], [0.0, 40.69901, -74.03982], [0.0, 40.69928, -74.04015], [0.0, 40.69928, -74.03966], [0.0, 40.69937, -74.03973], [0.0, 40.69945, -74.03988], [0.0, 40.69955, -74.04], [0.0, 40.69962, -74.04011], [0.0, 40.69974, -74.04015], [0.0, 40.69984, -74.04017], [0.0, 40.69991, -74.04017], [0.0, 40.70003, -74.0401], [0.0, 40.7001, -74.04012], [0.0, 40.70014, -74.04021], [0.0, 40.70017, -74.04029], [0.0, 40.70028, -74.0403], [0.0, 40.70039, -74.04035], [0.0, 40.70048, -74.04036], [0.0, 40.70054, -74.04031], [0.0, 40.7006, -74.04018], [0.0, 40.70064, -74.04006], [0.0, 40.70065, -74.03993], [0.0, 40.70063, -74.03979], [0.0, 40.70059, -74.03973], [0.0, 40.70054, -74.03961], [0.0, 40.70051, -74.03949]]]}, {\"type\": \"Polygon\", \"coordinates\": [[[0.0, 42.00059, -77.03866], [0.0, 42.00007, -77.42501], [0.0, 42.00019, -78.10883], [0.0, 41.99985, -78.5076], [0.0, 41.99937, -79.09032], [0.0, 41.99856, -79.43274], [0.0, 42.18115, -79.76178], [0.0, 42.52096, -79.74977], [0.0, 42.67703, -79.33801], [0.0, 42.83271, -78.95688], [0.0, 42.92336, -78.90566], [0.0, 42.95776, -78.96176], [0.0, 43.02896, -79.01175], [0.0, 43.07146, -79.03976], [0.0, 43.09586, -79.06356], [0.0, 43.10915, -79.05823], [0.0, 43.12686, -79.05677], [0.0, 43.15183, -79.0441], [0.0, 43.16968, -79.05102], [0.0, 43.18755, -79.05161], [0.0, 43.23297, -79.05479], [0.0, 43.25373, -79.05605], [0.0, 43.31256, -79.1053], [0.0, 43.50002, -79.06372], [0.0, 43.6304, -78.69929], [0.0, 43.6336, -78.50847], [0.0, 43.6315, -78.19401], [0.0, 43.63148, -77.80264], [0.0, 43.63154, -77.388], [0.0, 43.63108, -77.13346], [0.0, 43.62942, -76.857], [0.0, 43.70812, -76.73472], [0.0, 44.09085, -76.44042], [0.0, 44.12389, -76.37467], [0.0, 44.20417, -76.24966], [0.0, 44.29588, -76.13001], [0.0, 44.34386, -76.00836], [0.0, 44.34737, -75.98347], [0.0, 44.34687, -75.97828], [0.0, 44.34913, -75.94954], [0.0, 44.39292, -75.87468], [0.0, 44.47164, -75.80776], [0.0, 44.50968, -75.77215], [0.0, 44.52695, -75.74968], [0.0, 44.5684, -75.69544], [0.0, 44.61221, -75.63044], [0.0, 44.69375, -75.52095], [0.0, 44.71913, -75.47969], [0.0, 44.74268, -75.44405], [0.0, 44.77347, -75.39701], [0.0, 44.80752, -75.33875], [0.0, 44.83681, -75.30762], [0.0, 44.85633, -75.26259], [0.0, 44.86403, -75.24567], [0.0, 44.8775, -75.20877], [0.0, 44.88845, -75.17629], [0.0, 44.89668, -75.13987], [0.0, 44.91823, -75.12572], [0.0, 44.92574, -75.09812], [0.0, 44.92945, -75.06483], [0.0, 44.94691, -75.02646], [0.0, 44.96593, -74.99965], [0.0, 44.98341, -74.97249], [0.0, 44.98371, -74.91854], [0.0, 44.99763, -74.89176], [0.0, 45.00459, -74.86264], [0.0, 45.01144, -74.84173], [0.0, 45.01354, -74.81326], [0.0, 45.00506, -74.77775], [0.0, 44.99248, -74.75171], [0.0, 44.99056, -74.74464], [0.0, 45.00005, -74.71452], [0.0, 45.00005, -74.6784], [0.0, 44.99954, -74.65822], [0.0, 44.99951, -74.62524], [0.0, 44.99918, -74.6027], [0.0, 44.99861, -74.54344], [0.0, 44.99784, -74.49964], [0.0, 44.99673, -74.44958], [0.0, 44.99485, -74.40247], [0.0, 44.99311, -74.36027], [0.0, 44.99218, -74.30849], [0.0, 44.9921, -74.25662], [0.0, 44.99207, -74.21952], [0.0, 44.99166, -74.16624], [0.0, 44.99222, -74.12462], [0.0, 44.99394, -74.07723], [0.0, 44.99582, -74.02347], [0.0, 44.99775, -73.97188], [0.0, 45.00276, -73.80261], [0.0, 45.00291, -73.67546], [0.0, 45.00602, -73.55123], [0.0, 45.00878, -73.452], [0.0, 45.01041, -73.37458], [0.0, 45.01051, -73.36747], [0.0, 45.01084, -73.34312], [0.0, 44.83409, -73.37355], [0.0, 44.76071, -73.35206], [0.0, 44.66963, -73.37238], [0.0, 44.56884, -73.36823], [0.0, 44.53427, -73.33091], [0.0, 44.50862, -73.31446], [0.0, 44.45301, -73.29948], [0.0, 44.24369, -73.32441], [0.0, 44.18609, -73.39057], [0.0, 44.10372, -73.41479], [0.0, 43.99465, -73.40944], [0.0, 43.87505, -73.37416], [0.0, 43.79807, -73.3754], [0.0, 43.72325, -73.37258], [0.0, 43.674, -73.40727], [0.0, 43.62939, -73.4235], [0.0, 43.58303, -73.38525], [0.0, 43.62447, -73.35974], [0.0, 43.62437, -73.30208], [0.0, 43.5787, -73.2879], [0.0, 43.56653, -73.26072], [0.0, 43.53499, -73.24161], [0.0, 43.39973, -73.25123], [0.0, 43.04681, -73.26903], [0.0, 42.74602, -73.27642], [0.0, 42.74594, -73.26496], [0.0, 42.74439, -73.26553], [0.0, 42.7086, -73.27876], [0.0, 42.61177, -73.3147], [0.0, 42.59021, -73.3227], [0.0, 42.57318, -73.32907], [0.0, 42.53522, -73.34314], [0.0, 42.49777, -73.35709], [0.0, 42.47967, -73.36341], [0.0, 42.46481, -73.36905], [0.0, 42.45756, -73.37174], [0.0, 42.44793, -73.37519], [0.0, 42.42949, -73.38202], [0.0, 42.4009, -73.3926], [0.0, 42.38641, -73.39798], [0.0, 42.37737, -73.40134], [0.0, 42.35163, -73.41088], [0.0, 42.34927, -73.41175], [0.0, 42.34353, -73.41386], [0.0, 42.32909, -73.41917], [0.0, 42.25009, -73.44827], [0.0, 42.23331, -73.45443], [0.0, 42.19023, -73.47025], [0.0, 42.1634, -73.48011], [0.0, 42.12309, -73.49467], [0.0, 42.08735, -73.50775], [0.0, 42.04964, -73.48739], [0.0, 42.04964, -73.48731], [0.0, 42.04638, -73.48747], [0.0, 41.95746, -73.49308], [0.0, 41.8829, -73.49936], [0.0, 41.7489, -73.51151], [0.0, 41.62512, -73.52078], [0.0, 41.49007, -73.53325], [0.0, 41.4634, -73.53529], [0.0, 41.44947, -73.53613], [0.0, 41.39063, -73.54256], [0.0, 41.31968, -73.54966], [0.0, 41.2464, -73.50996], [0.0, 41.19542, -73.52098], [0.0, 41.17253, -73.57087], [0.0, 41.15369, -73.61237], [0.0, 41.1361, -73.65167], [0.0, 41.10729, -73.71365], [0.0, 41.05714, -73.69235], [0.0, 41.03641, -73.67519], [0.0, 41.02167, -73.6636], [0.0, 40.99452, -73.65965], [0.0, 40.96545, -73.54419], [0.0, 41.02587, -73.24956], [0.0, 41.09369, -72.9655], [0.0, 41.17324, -72.55156], [0.0, 41.25667, -72.10921], [0.0, 41.30512, -71.90967], [0.0, 41.30448, -71.90726], [0.0, 41.27625, -71.87985], [0.0, 41.27069, -71.87451], [0.0, 41.2537, -71.85851], [0.0, 41.25362, -71.85842], [0.0, 41.2501, -71.85446], [0.0, 41.20324, -71.80938], [0.0, 41.18428, -71.79115], [0.0, 41.1841, -71.79097], [0.0, 41.07716, -71.77749], [0.0, 40.99825, -71.86801], [0.0, 40.99063, -71.89683], [0.0, 40.96394, -71.97967], [0.0, 40.86098, -72.26454], [0.0, 40.74557, -72.62454], [0.0, 40.6251, -73.014], [0.0, 40.61167, -73.06409], [0.0, 40.56257, -73.24956], [0.0, 40.53731, -73.40638], [0.0, 40.52282, -73.51238], [0.0, 40.53454, -73.70609], [0.0, 40.49521, -73.88227], [0.0, 40.48979, -73.88665], [0.0, 40.4859, -74.24959], [0.0, 40.52129, -74.24608], [0.0, 40.57188, -74.21078], [0.0, 40.63759, -74.19571], [0.0, 40.6439, -74.12815], [0.0, 40.6613, -74.04979], [0.0, 40.76064, -74.01113], [0.0, 40.848, -73.95398], [0.0, 40.90506, -73.92331], [0.0, 40.96051, -73.90399], [0.0, 41.0066, -73.92338], [0.0, 41.01822, -73.94933], [0.0, 41.0308, -73.97729], [0.0, 41.0518, -74.02453], [0.0, 41.06071, -74.04455], [0.0, 41.07806, -74.08378], [0.0, 41.1056, -74.14589], [0.0, 41.111, -74.15829], [0.0, 41.13475, -74.21505], [0.0, 41.14676, -74.24317], [0.0, 41.19294, -74.34417], [0.0, 41.23097, -74.42301], [0.0, 41.28461, -74.53647], [0.0, 41.31837, -74.60869], [0.0, 41.35736, -74.69469], [0.0, 41.35742, -74.69491], [0.0, 41.43064, -74.74382], [0.0, 41.43346, -74.82486], [0.0, 41.46071, -74.90637], [0.0, 41.48221, -74.98426], [0.0, 41.53402, -75.02421], [0.0, 41.59112, -75.06033], [0.0, 41.61798, -75.04422], [0.0, 41.68048, -75.05121], [0.0, 41.73989, -75.05382], [0.0, 41.79594, -75.0935], [0.0, 41.83952, -75.11334], [0.0, 41.87077, -75.17829], [0.0, 41.86715, -75.24251], [0.0, 41.95468, -75.29669], [0.0, 41.99667, -75.35206], [0.0, 41.99861, -75.89049], [0.0, 41.99871, -76.44508], [0.0, 42.00048, -76.62119], [0.0, 42.00044, -77.03537]]]}]}";

	private Geometry getPoint(MfGeoJSONReaderForGoogle mfReader, double lat, double lng) throws JSONException {
		String pointJson = POINT_PRE + lng + "," + lat + POINT_POST;
		System.out.println(pointJson);

		MfGeo mfGeo = mfReader.decode(pointJson);
		if (mfGeo.getGeoType().equals(MfGeo.GeoType.FEATURE)) {
			MfFeature mfFeature = (MfFeature) mfGeo;
			return mfFeature.getMfGeometry().getInternalGeometry();
		}

		throw new JSONException("Error while decodinf point geometry.");
	}

	public boolean parseKml(String geometry, double lat, double lng) throws JSONException {
		MfGeoFactory mfFactory = new MfGeoFactory() {
			public MfFeature createFeature(String id, MfGeometry geometry, JSONObject properties) {
				return new MyFeature(id, geometry, properties);
			}
		};

		MfGeoJSONReaderForGoogle mfReader = new MfGeoJSONReaderForGoogle(mfFactory);
		Geometry point = getPoint(mfReader, lat, lng);

		MfGeo mfGeo = mfReader.decode(geometry);
		if (mfGeo.getGeoType().equals(MfGeo.GeoType.GEOMETRYCOLLECTION)) {

			GeometryCollection stateGeometryCollection = (GeometryCollection) ((MfGeometryCollection) mfGeo)
					.getInternalGeometry();

			for (int i = 0; i < stateGeometryCollection.getNumGeometries(); ++i) {
				Geometry stateGeometry = stateGeometryCollection.getGeometryN(i);
				if (stateGeometry.contains(point)) {
					System.out.println("Il punto fa parte della geometria dello stato di NY.");
					return true;
				}
			}
		} else if (mfGeo.getGeoType().equals(MfGeo.GeoType.GEOMETRY)) {
			Geometry stateGeometry = ((MfGeometry) mfGeo).getInternalGeometry();

			if (stateGeometry.contains(point)) {
				System.out.println("Il punto fa parte della geometria dello stato di NY.");
				return true;
			}
		}

		System.out.println("Mi sa che qualcosa non è andato bene....");
		return false;
	}

	public static void main(String[] args) {
		try {
			Main m = new Main();
			m.parseKml(NY_KML, 40.75, -74);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private class MyFeature extends MfFeature {
		private String id = null;
		private MfGeometry geometry = null;

		// private JSONObject properties = null;

		public MyFeature(String id, MfGeometry geometry, JSONObject properties) {
			this.id = id;
			this.geometry = geometry;
			// this.properties = properties;
		}

		public String getFeatureId() {
			return id;
		}

		public MfGeometry getMfGeometry() {
			return geometry;
		}

		public void toJSON(JSONWriter builder) throws JSONException {
			throw new RuntimeException("Not implemented");
		}
	}

}
